// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id
  name          String
  email         String
  customPrompt  String?
  projects       Project[]
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}




model Project{
  id String @id @default(uuid())
  name String
  description String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  systemPrompt String?
  adminSystemPrompt String?
  chatHistory ChatHistory[]

  status ProjectStatus @default(ACTIVE)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


enum ProjectStatus{
  ACTIVE
  DELETED
}

enum ChatHistoryStatus {
  ACTIVE
  DELETED
}

enum MessageStatus {
  ACTIVE
  DELETED
}

enum ChatHistoryVisibility {
  PUBLIC
  PRIVATE
}

model ChatHistory{
  id String @id @default(uuid())
  projectId String
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  messages Message[]
  roadMap RoadMap[] 
  visibility ChatHistoryVisibility @default(PUBLIC)
  status ChatHistoryStatus @default(ACTIVE)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model Message{
  id String @id @default(uuid())
  chatHistoryId String
  chatHistory ChatHistory @relation(fields: [chatHistoryId], references: [id], onDelete: Cascade)
  input String
  output String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model RoadMap{
  id String @id @default(uuid())
  chatHistoryId String
  chatHistory ChatHistory @relation(fields: [chatHistoryId], references: [id], onDelete: Cascade)
  content String
  // nodes Node[]
  version Int @default(autoincrement()) 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// model Node{
//   id String @id @default(uuid())
//   roadMapId String
//   roadMap RoadMap @relation(fields: [roadMapId], references: [id], onDelete: Cascade)
//    title      String
//   description String?
//   positionX  Float        // For canvas layout (React Three Fiber)
//   positionY  Float
//   positionZ  Float
//   parentId   String?      // For connecting nodes in a DAG
//   parent     Node? @relation("NodeParent", fields: [parentId], references: [id])
//   children   Node[] @relation("NodeParent")
//   content  String?
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }


model Model{
  id String   @id @default(uuid())
  name String
  description String
  createdAt DateTime @default(now())
  updatedAt DateTime  
}